{"name":"Logunit","tagline":"Test logging output within unit tests","body":"### logunit\r\n\r\nlogunit is a small and simple framework to allow testing of logging output \r\nfrom within unit tests. \r\n\r\n### Code example\r\nThe following example uses JUnit 4 as unit testing framework and log4j as logging framework. Read below for instructions on how to use different frameworks. You can browse a couple of examples [here](https://github.com/thombergs/logunit/tree/master/logunit-examples/src/test/java/org/wickedsource/logunit/showcase)\r\n\r\n```java\r\n@Test\r\n  public void test() {\r\n    // retrieve the Log4J implementation of LogUnit\r\n    LogUnit logunit = LogUnit.get();\r\n    \r\n    // use the expect* methods to define what you expect to be logged in\r\n    // your unit test\r\n    logunit.expect(\"An error occured!\", LogLevel.ERROR);\r\n\r\n    // produce an error message (in real code you would not do this\r\n    // directly, but call the code under test that does the logging)\r\n    logger.error(\"An error occured!\");\r\n\r\n    // assert that the expectations defined earlier were actually fulfilled\r\n    logunit.assertExpectations();\r\n}\r\n```\r\n\r\n### Using log4j\r\nUsing log4j 1.2.x, you should include the following maven module (or download the jar directly):\r\n\r\n#### Maven coordinates\r\n```xml\r\n<dependency>\r\n  <groupId>org.wickedsource</groupId>\r\n  <artifactId>logunit-log4j12</artifactId>\r\n  <version>1.0</version>\r\n  <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\n#### log4j configuration\r\nConfigure log4j to use org.wickedsource.logunit.log4j.LogUnitLog4jConsoleAppender as appender. This enables logunit to listen on log events. An example configuration is the following (log4j.properties in the root of the classpath):\r\n\r\n```\r\nlog4j.rootLogger=debug, stdout\r\nlog4j.appender.stdout=org.wickedsource.logunit.log4j.LogUnitLog4jConsoleAppender\r\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] (%F:%L) - %m%n\r\n```\r\n\r\n### Using logback\r\nUsing logback, you should include the following maven module (or download the jar directly):\r\n\r\n#### Maven coordinates\r\n```xml\r\n<dependency>\r\n  <groupId>org.wickedsource</groupId>\r\n  <artifactId>logunit-logback</artifactId>\r\n  <version>1.0</version>\r\n  <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\n#### logback configuration\r\nConfigure logback to use org.wickedsource.logunit.logback.LogUnitLogbackConsoleAppender as appender. This enables logunit to listen on log events. An example configuration is the following (logback.xml in the root of the classpath):\r\n\r\n```xml\r\n<configuration>\r\n  <appender name=\"STDOUT\" class=\"org.wickedsource.logunit.logback.LogUnitLogbackConsoleAppender\">\r\n    <encoder>\r\n      <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>\r\n    </encoder>\r\n  </appender>\r\n  <root level=\"debug\">\r\n    <appender-ref ref=\"STDOUT\" />\r\n  </root>\r\n</configuration>\r\n```\r\n\r\n### Using JUnit 4\r\nIf you use JUnit 4 as unit testing framework, simply add the following maven module to your classpath (or download the jar directly). It will then be automatically used by the central LogUnit class.\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>org.wickedsource</groupId>\r\n  <artifactId>logunit-junit4</artifactId>\r\n  <version>1.0</version>\r\n  <scope>test</scope>\r\n</dependency>\r\n```\r\n\r\n### Using TestNG\r\nIf you use TestNG as unit testing framework, simply add the following maven module to your classpath (or download the jar directly). It will then be automatically used by the central LogUnit class.\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>org.wickedsource</groupId>\r\n  <artifactId>logunit-testng</artifactId>\r\n  <version>1.0</version>\r\n  <scope>test</scope>\r\n</dependency>\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}